package com.company.lab1;

import javax.swing.*;

// 1. Реалізуйте програму імітації руху більярдних кульок (код у додатку), в якій рух кожної кульки відтворюється в окремому
// потоці (див. презентацію «Створення та запуск потоків в java» та приклад). Спостерігайте роботу програми при збільшенні
// кількості кульок. Поясніть результати спостереження. Опишіть переваги потокової архітектури програм. 10 балів.

// 2. Модифікуйте програму так, щоб при потраплянні в «лузу» кульки зникали, а відповідний потік завершував свою роботу.
// Кількість кульок, яка потрапила в «лузу», має динамічно відображатись у текстовому полі інтерфейсу програми. 10 балів.

// 3. Виконайте дослідження параметру priority потоку. Для цього модифікуйте програму «Більярдна кулька» так, щоб кульки
// червоного кольору створювались з вищим пріоритетом потоку, в якому вони виконують рух, ніж кульки синього кольору.
// Спостерігайте рух червоних та синіх кульок при збільшенні загальної кількості кульок. Проведіть такий експеримент.
// Створіть багато кульок синього кольору (з низьким пріоритетом) і одну червоного кольору, які починають рух  в одному
// й тому ж самому місці більярдного стола, в одному й тому ж самому напрямку та з однаковою швидкістю. Спостерігайте рух
// кульки з більшим пріоритетом. Повторіть експеримент кілька разів, значно збільшуючи кожного разу кількість кульок
// синього кольору. Зробіть висновки про вплив пріоритету потоку на його роботу в залежності від загальної кількості потоків. 20 балів.

// 4. Побудуйте ілюстрацію для методу join() класу Thread з використанням руху більярдних кульок різного кольору.
// Поясніть результат, який спостерігається. 10 балів.

// 5. Створіть два потоки, один з яких виводить на консоль символ ‘-‘, а інший – символ ‘|’. Запустіть потоки в основній
// програмі так, щоб вони виводили свої символи в рядок. Виведіть на консоль 100 таких рядків. Поясніть виведений результат. 10 балів.

// 6. Використовуючи найпростіші методи управління потоками, добийтесь почергового виведення на консоль символів. 15 балів.

// 7. Створіть клас Counter з методами increment() та decrement(), які збільшують та зменшують значення лічильника відповідно.
// Створіть два потоки, один з яких збільшує 100000 разів значення лічильника, а інший –зменшує 100000 разів значення лічильника.
// Запустіть потоки на одночасне виконання. Спостерігайте останнє значення лічильника. Поясніть результат. 10 балів.

// 8. Використовуючи синхронізований доступ, добийтесь правильної роботи лічильника при одночасній роботі з ним двох і більше потоків.
// Опрацюйте використання таких способів синхронізації: синхронізований метод, синхронізований блок, блокування об’єкта.
// Порівняйте способи синхронізації. 15 балів.


public class Bounce {
    public static void main(String[] args) {
        BounceFrame frame = new BounceFrame();
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setVisible(true);
        System.out.println("Thread name = " + Thread.currentThread().getName());
    }
}